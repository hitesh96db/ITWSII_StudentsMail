(dp1
S'output'
p2
S"<type 'exceptions.RuntimeError'> Using a recursive select but encountered a broken reference: mail 319"
p3
sS'layer'
p4
S'/home/hitesh96db/Documents/web2py/applications/ITWSII_StudentsMail/controllers/main.py'
p5
sS'code'
p6
S'def loginvalidate():\n\timport json\n\n        studentinfo = {}\n\n        studentinfo["name"]="Hitesh Sharma";\n        studentinfo["rollno"]="201301065";\n\n        studentinfo["batch"]="2K14";\n\n        return json.dumps(studentinfo)\n\n\ndef loginmy():\n\tif len(request.vars) != 0:\n\t\tsession["name"] = "None"\n\t\tsession["email"] = "None"\n\t\treturn dict(log=request.vars["logout"])\n\treturn dict(log=0)\n\ndef passthru():\n\tsession["name"] = request.vars["name"]\n\tsession["email"] = request.vars["email"]\n\treturn "proceed"\n\ndef getuser():\n\n\tname = session["name"]\n\temail = session["email"]\n\tc = db( db.student.email_id == email ).select()\n\tif len(c) == 0:\n\t\tdb.student.insert(email_id = email , name = name )\n\treturn "Added to Database!"\n\ndef mails():\n\n\timport time\n#       session.sent_time = time.strftime("%H:%M:%S");\n#       session.sent_date = time.strftime("%d-%m-%Y");\n\n\tif session["name"] == "None":\n\t\tresponse.view = \'main/pls.html\'\n\t\treturn dict()\t\n\treturn dict()\n\ndef getid():\n\tsubstr = request.vars["id"]\n\tl = len(substr)\n\trows = db(db.student.email_id[:l] == substr ).select()\n\ts = ""\n\tfor row in rows:\n\t\tif s == "":\n\t\t\ts = row.email_id\t\n\t\telse:\n\t\t\ts = s+" "+row.email_id\n\treturn str(s)\n\ndef add_TA():\n        TA = {\'anish.shankar\':\'Anish Shankar\', \'anurag.soni\':\'Anurag Soni\', \'madhavan.chetlur\':\'Madhavan Malolan\', \'rajeshkumar.gupta\':\'Rajeshkumar Gupta\', \'ayush.minocha\':\'Ayush Minocha\', \'vineet.kumar\':\'Vineet Kumar\', \'ankush.jain\':\'Ankush Jain\', \'mayank.g\':\'Mayank Gupta\', \'swapna.kidambi\':\'Swapna Kidambi\', \'vishrut.mehta\':\'Vishrut Mehta\', \'gaurav.mishra\':\'Gaurav Mishra\'}\n        for i in TA:\n                c = db(db.student.email_id == i).select();\n                if(len(c) == 0):\n                        db.student.insert(email_id=i, name=TA[i]);\n\n        d = {}\n        rows = db(db.student).select();\n        for row in rows:\n                d[row.email_id] = row.name;\n\n        return "Added TAs"\n\ndef send():\n\n\timport time\n\n        session.sent_time = time.strftime("%H:%M:%S");\n        session.sent_date = time.strftime("%d-%m-%Y");\n\trow = db(db.un).select()       \n\timport gluon.contrib.simplejson,json\n\ta = gluon.contrib.simplejson.loads(request.body.read())\n\td = a["receivers"].split(" ")\n\tsentreceivers = ""\n\td.remove("")\n        for i in d:\n   \t\tc = db(db.student.email_id == i).select();\n\t\tif(len(c) == 0):\n       \t\t\treturn "Please enter a valid e-mail address.";\n\tfor i in d:\n\t\tif a["sub"] == "":\n\t\t\ta["sub"] = "No Subject"\n\t\tsentreceivers = sentreceivers+" "+i\n        \tdb.mail.insert(sender_name=a["sender_name"],rec_email=i, sender_email=a["send_id"], subject=a["sub"],mail_message=a["msg"], sent_date=session.sent_date, sent_time=session.sent_time, tag=a["tag"], unique_field=row[0].mail_number);\n\t\n\tdb.sentmail.insert(sender_name=a["sender_name"],receivers=sentreceivers, sender_email=a["send_id"], subject=a["sub"],mail_message=a["msg"], sent_date=session.sent_date, sent_time=session.sent_time, tag=a["tag"], unique_field=row[0].mail_number)      \n\tm = {}\n\trows = db(db.mail).select();\n\tfor i in d:\n\t\tb = []\n\t\tfor row in rows:\n                \tif row.rec_email == i:\n                        \tb.append(row.id);\n\t\tm[i] = b;\n\trows = db(db.student).select();\n        for i in m:\n\t\tfor row in rows:\n                \tif row.email_id == i:\n \t                       \trow.update_record(mails=m[i]);\n\t\t\n\trow = db(db.un).select()       \n\t#time.sleep(1);\t\n\trow[0].mail_number += 1;\n\trow[0].update_record(mail_number = row[0].mail_number);\n\treturn "Mail Sent!"\n\ndef attach():\n\trow = db(db.un).select();\n\tattachme = db(db.attachments).select();\n\tmail = db(db.mail).select();\n\tfor i in mail:\n\t\tfor j in attachme:\n                       check = row[0].mail_number - 1\n                       if j.uniqueId == check and i.unique_field == check:\n                     \t\ti.update_record(attachment=j.id)\n\tmail = db(db.sentmail).select();\n        for i in mail:\n                for j in attachme:\n                        check = row[0].mail_number-1\n                        if j.uniqueId == check and i.unique_field == check:\n                                i.update_record(attachment=j.id)\n        return ""\ndef show():\n\timport json\n\tct = 1;\n        mails = {};\n        user = request.vars[\'id\'];\n        row = db(db.student.email_id == user).select(db.student.mails);\n\tif row[0][\'mails\'] == None:\n\t\treturn str(mails);\n\ta = row[0][\'mails\']\n\ta.sort(reverse=True)\n        for j in a:\n\t    if j.delt == 0:\n            \ttemp = {}\n                temp["send_id"] = j.sender_email\n                temp["sub"] = j.subject\n                temp["msg"] = j.mail_message\n                temp["sent_date"] = j.sent_date\n                temp["sent_time"] = j.sent_time\n                temp["tag"] = j.tag\n\t\ttemp["id"] = j.id\n\t\ttemp["important"] = j.important\n\t\ttemp["red"] = j.red\n\n\t\tif j.attachment:\n\t\t\ttemp["Name"] = j.attachment[0].Name\n\t\t\ttemp["Link"] = j.attachment[0].attachment\n\t\telse:\n\t\t\ttemp["Name"] = "None"\n\t\t\ttemp["Link"] = "None"\n                mails[ct] = temp;\n\t\tct += 1;\n        return json.dumps(mails)\n\ndef count():\n        import json\n\tc = {\'Academics\':0, \'Sports\':0, \'Events\':0, \'Cultural\':0, \'Urgent\':0, \'Lost/Found\':0, \'General\':0}\n\tname = request.get_vars[\'name\'];\n\trow = db(db.student.email_id == name).select()\n\tfor i in row[0].mails:\n\t\tif db.mail.id == i and i.red == 0 and i.delt == 0:\n\t  \t\tif c.has_key(i.tag):\n\t\t\t\tc[i.tag] += 1;\t    \t\n\t\n\treturn json.dumps(c)\ndef sent():\n\timport json\n\tct = 1\n\tmails = {}\n\teid = request.get_vars[\'eid\']\n\trows = db(db.mail.sender_email == eid).select()\n\tfor row in rows:\n\t\td = {}\n\t\td[\'rec_email\'] = row.rec_email\n\t\td[\'sub\'] = row.subject\n\t\td[\'msg\'] = row.mail_message\n\t\td[\'tag\'] = row.tag\n\t\td[\'time\'] = row.sent_time\n\t\td[\'date\'] = row.sent_date\n\t\tmails[ct] = d;\n\t\tct += 1\n\treturn json.dumps(mails)\n\ndef sentmails():\n\n\timport json\n\temail = request.vars["email"]\n\trows = db(db.sentmail.id > 0).select()\n\trows = rows.as_list()\n\trows.sort(reverse=True)\n\n        k = [ str(x) for x in range(1,len(rows)+1) ]\n\t\n        js = dict(zip(k,rows))\n\n        return json.dumps(js)\n\n\ndef drafts():\n        import time, gluon.contrib.simplejson\n        import json\n\n        date = time.strftime("%d-%m-%Y")\n        a = gluon.contrib.simplejson.loads(request.body.read())\n\n        receivers = a["receivers"]\n\trows = db(db.draftmail).select()\n\tflag = 0\n\tfor i in rows:\n\t\tif i.sender_name == a[\'sender_name\'] and i.receivers == receivers and i.sender_email == a[\'send_id\'] and i.subject == a[\'sub\'] and i.mail_message == a[\'msg\']:\n\t\t\treturn "already"\n\n  \tdb.draftmail.insert(sender_name=a[\'sender_name\'],receivers=receivers, sender_email=a[\'send_id\'], subject=a[\'sub\'],mail_message=a[\'msg\'], made_date=date, tag=a[\'tag\'])\n        return "Mail Saved to Drafts!"\n\n\ndef getdrafts():\n\n        import time, gluon.contrib.simplejson\n        import json\n        send_id = request.vars["email"]\n\n        rows = db( db.draftmail.sender_email == send_id ).select()\n\trows = rows.as_list()\n\t\n\tk = [ x for x in range(1,len(rows)+1) ]\n\t\n\tjs = dict(zip(k,rows))\t\n       \n\treturn json.dumps(js)\n\ndef checkdrafts():\n\timport time, gluon.contrib.simplejson\n        import json\n\n        date = time.strftime("%d-%m-%Y")\n        a = gluon.contrib.simplejson.loads(request.body.read())\n\n        receivers = a[\'receivers\']\n\t\n\tdb((db.draftmail.sender_name == a[\'sender_name\'] )&(db.draftmail.receivers == receivers)&(db.draftmail.sender_email == a[\'send_id\'])&(db.draftmail.subject == a[\'sub\'] ) &( db.draftmail.mail_message == a[\'message\'])).delete()\n        \n\treturn "Draft Mail deleted!"\n\ndef deletedrafts():\n\t\n\timport time, gluon.contrib.simplejson\n\twhole = gluon.contrib.simplejson.loads(request.body.read())\n\t\t\t\n\tfor i in whole:\n\t\n\t\tk = {}\n\t\tk = whole[i]\n\t\tdb((db.draftmail.sender_name == k[\'sender_name\'] )&(db.draftmail.receivers == k["receivers"])&(db.draftmail.sender_email == k[\'sender_email\'])&(db.draftmail.subject == k[\'subject\'] ) &( db.draftmail.mail_message == k[\'mail_message\'])).delete()\n\n        return "Deleted from Drafts!"\n\ndef deletesent():\n\n\timport time, gluon.contrib.simplejson\n        whole = gluon.contrib.simplejson.loads(request.body.read())\n\n        for i in whole:\n\n                k = {}\n                k = whole[i]\n\n                db((db.sentmail.sender_name == k[\'sender_name\'] )&(db.sentmail.receivers == k["receivers"])&(db.sentmail.sender_email == k[\'sender_email\'])&(db.sentmail.subject == k[\'subject\'] )&( db.sentmail.mail_message == k[\'mail_message\'])).delete()\n\n        return "Deleted from Sent!"\n\t\ndef attachment():\n\tId = request.vars[\'id\'];\n\tSmail = db(db.sentmail.id==Id).select()\n\tif Smail[0].attachment is not None:\n\t\tattachId = Smail[0].attachment[0].Name\n\t\tlink = Smail[0].attachment[0].attachment\n\t\treturn attachId+">"+link\n\treturn ""\ndef attachment2():\n\tId = request.vars[\'id\'];\n\tmail = db(db.mail.id==Id).select()\n\tif mail[0].attachment is not None:\n\t\tattachId = mail[0].attachment[0].Name\n\t\tlink = mail[0].attachment[0].attachment\n\t\treturn attachId+">"+link\n\treturn ""\n\ndef deleteInbox():\n\tcounter = request.vars[\'count\'];\n\tcounter = counter.split(">");\n\tcounter.pop();\n\tfor i in counter:\n\t\trow = db(db.mail.id==i).select()\n\t\trow[0].update_record(delt=1);\n\treturn ""\n\ndef readInbox():\n        counter = request.vars[\'count\'];\n        counter = counter.split(">");\n        counter.pop();\n        for i in counter:\n                row = db(db.mail.id==i).select()\n                row[0].update_record(red=1);\n        return ""\n\ndef unreadInbox():\n        counter = request.vars[\'count\'];\n        counter = counter.split(">");\n        counter.pop();\n        for i in counter:\n                row = db(db.mail.id==i).select()\n                row[0].update_record(red=0);\n        return ""\ndef importantInbox():\n        counter = request.vars[\'count\'];\n        counter = counter.split(">");\n        counter.pop();\n        for i in counter:\n                row = db(db.mail.id==i).select()\n                row[0].update_record(important=1);\n        return ""\n\ndef search():\n\n        import json\n        ct = 1\n        result = {}\n        x = request.vars["value"];\n\tname = request.vars["name"]\n        if x == \'\':\n                return json.dumps("None");\n\tx=x.lower();\n        if x == \'starred\' or x == \'important\':\n\t\trows = db((db.mail.rec_email == name)&(db.mail.delt==0)).select();\n\t\tfor row in rows:\n\t\t\tif row.important == 1 or (x.lower() in row.subject.lower() or x.lower() in row.sender_email.lower()):\n                     \t\tmail = {}\n                        \tmail["id"]=row.id\n                        \tmail["sub"] = row.subject\n                       \t\tmail["send_id"] = row.sender_email\n                        \tmail["sent_date"] = row.sent_date\n                        \tmail["tag"] = row.tag\n                        \tmail["red"] = row.red\n                        \tmail["important"] = row.important\n                        \tmail["msg"] = row.mail_message\n                        \tmail["sent_time"] = row.sent_time\n                        \tif row.attachment:\n                               \t\tmail["Name"] = row.attachment[0].Name\n                                \tmail["Link"] = row.attachment[0].attachment\n                        \tresult[ct] = mail\n                        \tct += 1\n        \treturn json.dumps(result);\n\tif x == \'read\':\n                rows = db((db.mail.rec_email == name)&(db.mail.delt==0)).select();\n                for row in rows:\n                        if row.red == 1 or (x.lower() in row.subject.lower() or x.lower() in row.sender_email.lower()):\n                                mail = {}\n                                mail["id"]=row.id\n                                mail["sub"] = row.subject\n                                mail["send_id"] = row.sender_email\n                                mail["sent_date"] = row.sent_date\n                                mail["tag"] = row.tag\n                                mail["red"] = row.red\n                                mail["important"] = row.important\n                                mail["msg"] = row.mail_message\n                                mail["sent_time"] = row.sent_time\n                                if row.attachment:\n                                        mail["Name"] = row.attachment[0].Name\n                                        mail["Link"] = row.attachment[0].attachment\n                                result[ct] = mail\n                                ct += 1\n                return json.dumps(result);\n\tif x == \'unread\':\n                rows = db((db.mail.rec_email == name)&(db.mail.delt==0)).select();\n                for row in rows:\n                        if row.red == 0 or (x.lower() in row.subject.lower() or x.lower() in row.sender_email.lower()):\n                                mail = {}\n                                mail["id"]=row.id\n                                mail["sub"] = row.subject\n                                mail["send_id"] = row.sender_email\n                                mail["sent_date"] = row.sent_date\n                                mail["tag"] = row.tag\n                                mail["red"] = row.red\n                                mail["important"] = row.important\n                                mail["msg"] = row.mail_message\n                                mail["sent_time"] = row.sent_time\n                                if row.attachment:\n                                        mail["Name"] = row.attachment[0].Name\n                                        mail["Link"] = row.attachment[0].attachment\n                                result[ct] = mail\n                                ct += 1\n                return json.dumps(result);\n\n\trows = db((db.mail.rec_email == name)&(db.mail.delt==0)).select();\n        for row in rows:\n        \tif x.lower() in row.subject.lower() or x.lower() in row.sender_email.lower():\n                        mail = {}\n                        mail["id"]=row.id\n                        mail["sub"] = row.subject\n                        mail["send_id"] = row.sender_email\n                        mail["sent_date"] = row.sent_date\n                        mail["tag"] = row.tag\n                        mail["red"] = row.red\n                        mail["important"] = row.important\n                        mail["msg"] = row.mail_message\n                        mail["sent_time"] = row.sent_time\n\t\t\tif row.attachment:\n\t\t\t\tmail["Name"] = row.attachment[0].Name\n\t\t\t\tmail["Link"] = row.attachment[0].attachment\n                        result[ct] = mail\n                        ct += 1\n        return json.dumps(result);\n\n\ndef showTrash():\t\n\timport json\n\tct = 1;\n        mails = {};\n        user = request.vars[\'id\'];\n        row = db(db.student.email_id == user).select(db.student.mails);\n\tif row[0][\'mails\'] == None:\n\t\treturn str(mails);\n\ta = row[0][\'mails\']\n\ta.sort(reverse=True)\n        for j in a:\n\t\tif j.delt == 1:\n                \ttemp = {}\n                   \ttemp["send_id"] = j.sender_email\n                   \ttemp["sub"] = j.subject\n                   \ttemp["msg"] = j.mail_message\n                   \ttemp["sent_date"] = j.sent_date\n                   \ttemp["sent_time"] = j.sent_time\n                   \ttemp["tag"] = j.tag\n\t\t   \ttemp["id"] = j.id\n\t\t\tif j.attachment:\n\t\t\t\ttemp["Name"] = j.attachment[0].Name\n\t\t\t\ttemp["Link"] = j.attachment[0].attachment\n\t\t\telse:\n\t\t\t\ttemp["Name"] = "None"\n\t\t\t\ttemp["Link"] = "None"\n                   \tmails[ct] = temp;\n\t\t   \tct += 1;\n        return json.dumps(mails)\n\ndef attachmentview():\n\n\trow = db(db.un).select();\n\n\n        form = SQLFORM(db.attachments, formstyle="divs", submit_button="Attach", upload=URL(\'download\'), fields=[\'attachment\']);\n        if request.vars.attachment is not None and request.vars.attachment != "":\n                form.vars.uniqueId = row[0].mail_number\n                form.vars.Name = request.vars.attachment.filename\n        if form.accepts(request, formname=None):\n                 pass\n        return dict(form=form)\n\t\t\ndef setread():\n\ta = eval(request.vars["myjson"])\n\tb = db((db.mail.id == a["id"])&(db.mail.sent_time == a["sent_time"])&(db.mail.sent_date == a["sent_date"])&(db.mail.subject == a["sub"])&(db.mail.sender_email == a["send_id"])&(db.mail.mail_message == a["msg"])&(db.mail.tag == a["tag"])).select()\n\tif len(b) != 0:\t\n\t\tb[0].update_record(red=1)\n\treturn "Done!"\n\ndef setunread():\n\ta = eval(request.vars["myjson"])\n\tb = db((db.mail.id == a["id"])&(db.mail.sent_time == a["sent_time"])&(db.mail.sent_date == a["sent_date"])&(db.mail.subject == a["sub"])&(db.mail.sender_email == a["send_id"])&(db.mail.mail_message == a["msg"])&(db.mail.tag == a["tag"])).select()\n\tif len(b) != 0:\t\n\t\tb[0].update_record(red=0)\n\treturn "Done!"\n\ndef setimportant():\n\ta = eval(request.vars["myjson"])\n\tb = db((db.mail.id == a["id"])&(db.mail.sent_time == a["sent_time"])&(db.mail.sent_date == a["sent_date"])&(db.mail.subject == a["sub"])&(db.mail.sender_email == a["send_id"])&(db.mail.mail_message == a["msg"])&(db.mail.tag == a["tag"])).select()\n\tif len(b) != 0:\t\n\t\tb[0].update_record(important=1)\n\treturn "Done!"\n\ndef deleteTrash():\n\tmails = db(db.mail).select();\n\tfor mail in mails:\n\t\tif mail.delt == 1:\n\t\t\tdb(db.mail.id == mail.id).delete();\n\treturn "Deleted"\n\nresponse._vars=response._caller(showTrash)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/hitesh96db/Documents/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/hitesh96db/Documents/web2py/applications/ITWSII_StudentsMail/controllers/main.py", line 496, in <module>\n  File "/home/hitesh96db/Documents/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/hitesh96db/Documents/web2py/applications/ITWSII_StudentsMail/controllers/main.py", line 436, in showTrash\n    if j.delt == 1:\n  File "/home/hitesh96db/Documents/web2py/gluon/dal.py", line 8565, in __getattr__\n    self.__allocate()\n  File "/home/hitesh96db/Documents/web2py/gluon/dal.py", line 8559, in __allocate\n    "Using a recursive select but encountered a broken reference: %s %d"%(self._table, long(self)))\nRuntimeError: Using a recursive select but encountered a broken reference: mail 319\n'
p11
s.