def loginvalidate():
	
	import mechanize
	import os
	import re
	import json

	br = mechanize.Browser()
	br.set_proxies({"ftp":"proxy.iiit.ac.in:8080","http":"proxy.iiit.ac.in:8080"})
	br.set_handle_equiv(False)
	br.set_handle_robots(False)
	br.set_handle_refresh(False)
	br.addheaders = [ ('User-Agent','Firefox') ]

	br.open("https://isas.iiit.ac.in/index.php")
	response1 = br.response()
	#print response1.geturl()
	#print response1.info()

	br.form = list(br.forms())[0]
	#for control in br.form.controls:
	#       print control.name


	br["StUdent"] = request.vars["email"]
	br["password"] = request.vars["password"]
	#br["rno"]="2013"
	#br["grade"]="A"

	response1 = br.submit()
	f = open('isas.html', 'w')
	k = response1.read()
	f.write(k)
	f.close()

	f = open("isas.html","r")
	l = f.readlines()
	f = open("isas.html","r")
	doc = f.read()

	studentinfo = {}

	if "Incorrect" in doc:
	        studentinfo["name"] = "unknown"
		return json.dumps(studentinfo)
	for i in l:
	        if "Name" in i:
 	               line1 = i
	        if "Batch" in i:
	                line2 = i
	                break

	line1 = line1.strip()
	line2 = line2.strip()

	pass2 = re.findall("<b>.{1,30}<\/b\>",line1)
	name = pass2[0][3:-4].lower().title()
	rollno = pass2[1][3:-5]

	studentinfo = {}

	studentinfo["name"]=name;
	studentinfo["rollno"]=rollno;
	
	pass2 = re.findall("<b>.{1,30}<\/b\>",line2)
	batch = pass2[0][3:-4]
	no = pass2[1][3:-4]

	studentinfo["batch"]=batch;

	return json.dumps(studentinfo)


def loginmy():
	if len(request.vars) != 0:
		session["name"] = "None"
		session["email"] = "None"
		return dict(log=request.vars["logout"])
	return dict(log=0)

def passthru():
	session["name"] = request.vars["name"]
	session["email"] = request.vars["email"]
	return "proceed"

def getuser():

	name = session["name"]
	email = session["email"]
	c = db( db.student.email_id == email ).select()
	if len(c) == 0:
		db.student.insert(email_id = email , name = name )
	return "Added to Database!"

def mails():

	import time
#       session.sent_time = time.strftime("%H:%M:%S");
#       session.sent_date = time.strftime("%d-%m-%Y");

	if session["name"] == "None":
		response.view = 'main/pls.html'
		return dict()	
	return dict()

def getid():
	substr = request.vars["id"]
	l = len(substr)
	rows = db(db.student.email_id[:l] == substr ).select()
	s = ""
	for row in rows:
		if s == "":
			s = row.email_id	
		else:
			s = s+" "+row.email_id
	return str(s)

def add_TA():
        TA = {'anish.shankar':'Anish Shankar', 'anurag.soni':'Anurag Soni', 'madhavan.chetlur':'Madhavan Malolan', 'rajeshkumar.gupta':'Rajeshkumar Gupta', 'ayush.minocha':'Ayush Minocha', 'vineet.kumar':'Vineet Kumar', 'ankush.jain':'Ankush Jain', 'mayank.g':'Mayank Gupta', 'swapna.kidambi':'Swapna Kidambi', 'vishrut.mehta':'Vishrut Mehta', 'gaurav.mishra':'Gaurav Mishra'}
        for i in TA:
                c = db(db.student.email_id == i).select();
                if(len(c) == 0):
                        db.student.insert(email_id=i, name=TA[i]);

        d = {}
        rows = db(db.student).select();
        for row in rows:
                d[row.email_id] = row.name;

        return "Added TAs"

def send():

	import time

        session.sent_time = time.strftime("%H:%M:%S");
        session.sent_date = time.strftime("%d-%m-%Y");
	row = db(db.un).select()       
	import gluon.contrib.simplejson,json
	a = gluon.contrib.simplejson.loads(request.body.read())
	d = a["receivers"].split(" ")
	sentreceivers = ""
	d.remove("")
        for i in d:
   		c = db(db.student.email_id == i).select();
		if(len(c) == 0):
       			return "Please enter a valid e-mail address.";
	for i in d:
		if a["sub"] == "":
			a["sub"] = "No Subject"
		sentreceivers = sentreceivers+" "+i
        	db.mail.insert(sender_name=a["sender_name"],rec_email=i, sender_email=a["send_id"], subject=a["sub"],mail_message=a["msg"], sent_date=session.sent_date, sent_time=session.sent_time, tag=a["tag"], unique_field=row[0].mail_number);
	
	db.sentmail.insert(sender_name=a["sender_name"],receivers=sentreceivers, sender_email=a["send_id"], subject=a["sub"],mail_message=a["msg"], sent_date=session.sent_date, sent_time=session.sent_time, tag=a["tag"], unique_field=row[0].mail_number)      
	m = {}
	rows = db(db.mail).select();
	for i in d:
		b = []
		for row in rows:
                	if row.rec_email == i:
                        	b.append(row.id);
		m[i] = b;
	rows = db(db.student).select();
        for i in m:
		for row in rows:
                	if row.email_id == i:
 	                       	row.update_record(mails=m[i]);
		
	row = db(db.un).select()       
	#time.sleep(1);	
	row[0].mail_number += 1;
	row[0].update_record(mail_number = row[0].mail_number);
	return "Mail Sent!"

def attach():
	row = db(db.un).select();
	attachme = db(db.attachments).select();
	mail = db(db.mail).select();
	for i in mail:
		for j in attachme:
                       check = row[0].mail_number - 1
                       if j.uniqueId == check and i.unique_field == check:
                     		i.update_record(attachment=j.id)
	mail = db(db.sentmail).select();
        for i in mail:
                for j in attachme:
                        check = row[0].mail_number-1
                        if j.uniqueId == check and i.unique_field == check:
                                i.update_record(attachment=j.id)
        return ""
def show():
	import json
	ct = 1;
        mails = {};
        user = request.vars['id'];
        row = db(db.student.email_id == user).select(db.student.mails);
	if row[0]['mails'] == None:
		return str(mails);
	a = row[0]['mails']
	a.sort(reverse=True)
        for j in a:
	    if j.delt == 0:
            	temp = {}
                temp["send_id"] = j.sender_email
                temp["sub"] = j.subject
                temp["msg"] = j.mail_message
                temp["sent_date"] = j.sent_date
                temp["sent_time"] = j.sent_time
                temp["tag"] = j.tag
		temp["id"] = j.id
		temp["important"] = j.important
		temp["red"] = j.red

		if j.attachment:
			temp["Name"] = j.attachment[0].Name
			temp["Link"] = j.attachment[0].attachment
		else:
			temp["Name"] = "None"
			temp["Link"] = "None"
                mails[ct] = temp;
		ct += 1;
        return json.dumps(mails)

def count():
        import json
	c = {'Academics':0, 'Sports':0, 'Events':0, 'Cultural':0, 'Urgent':0, 'Lost/Found':0, 'General':0}
	name = request.get_vars['name'];
	row = db(db.student.email_id == name).select()
	for i in row[0].mails:
		if db.mail.id == i and i.red == 0 and i.delt == 0:
	  		if c.has_key(i.tag):
				c[i.tag] += 1;	    	
	
	return json.dumps(c)
def sent():
	import json
	ct = 1
	mails = {}
	eid = request.get_vars['eid']
	rows = db(db.mail.sender_email == eid).select()
	for row in rows:
		d = {}
		d['rec_email'] = row.rec_email
		d['sub'] = row.subject
		d['msg'] = row.mail_message
		d['tag'] = row.tag
		d['time'] = row.sent_time
		d['date'] = row.sent_date
		mails[ct] = d;
		ct += 1
	return json.dumps(mails)

def sentmails():

	import json
	email = request.vars["email"]
	rows = db(db.sentmail.sender_email == email).select()
	rows = rows.as_list()
	rows.sort(reverse=True)

        k = [ str(x) for x in range(1,len(rows)+1) ]
	
        js = dict(zip(k,rows))

        return json.dumps(js)


def drafts():
        import time, gluon.contrib.simplejson
        import json

        date = time.strftime("%d-%m-%Y")
        a = gluon.contrib.simplejson.loads(request.body.read())

        receivers = a["receivers"]
	rows = db(db.draftmail).select()
	flag = 0
	for i in rows:
		if i.sender_name == a['sender_name'] and i.receivers == receivers and i.sender_email == a['send_id'] and i.subject == a['sub'] and i.mail_message == a['msg']:
			return "already"

  	db.draftmail.insert(sender_name=a['sender_name'],receivers=receivers, sender_email=a['send_id'], subject=a['sub'],mail_message=a['msg'], made_date=date, tag=a['tag'])
        return "Mail Saved to Drafts!"


def getdrafts():

        import time, gluon.contrib.simplejson
        import json
        send_id = request.vars["email"]

        rows = db( db.draftmail.sender_email == send_id ).select()
	rows = rows.as_list()
	
	k = [ x for x in range(1,len(rows)+1) ]
	
	js = dict(zip(k,rows))	
       
	return json.dumps(js)

def checkdrafts():
	import time, gluon.contrib.simplejson
        import json

        date = time.strftime("%d-%m-%Y")
        a = gluon.contrib.simplejson.loads(request.body.read())

        receivers = a['receivers']
	
	db((db.draftmail.sender_name == a['sender_name'] )&(db.draftmail.receivers == receivers)&(db.draftmail.sender_email == a['send_id'])&(db.draftmail.subject == a['sub'] ) &( db.draftmail.mail_message == a['message'])).delete()
        
	return "Draft Mail deleted!"

def deletedrafts():
	
	import time, gluon.contrib.simplejson
	whole = gluon.contrib.simplejson.loads(request.body.read())
			
	for i in whole:
	
		k = {}
		k = whole[i]
		db((db.draftmail.sender_name == k['sender_name'] )&(db.draftmail.receivers == k["receivers"])&(db.draftmail.sender_email == k['sender_email'])&(db.draftmail.subject == k['subject'] ) &( db.draftmail.mail_message == k['mail_message'])).delete()

        return "Deleted from Drafts!"

def deletesent():

	import time, gluon.contrib.simplejson
        whole = gluon.contrib.simplejson.loads(request.body.read())

        for i in whole:

                k = {}
                k = whole[i]

                db((db.sentmail.sender_name == k['sender_name'] )&(db.sentmail.receivers == k["receivers"])&(db.sentmail.sender_email == k['sender_email'])&(db.sentmail.subject == k['subject'] )&( db.sentmail.mail_message == k['mail_message'])).delete()

        return "Deleted from Sent!"
	
def attachment():
	Id = request.vars['id'];
	Smail = db(db.sentmail.id==Id).select()
	if Smail[0].attachment is not None:
		attachId = Smail[0].attachment[0].Name
		link = Smail[0].attachment[0].attachment
		return attachId+">"+link
	return ""
def attachment2():
	Id = request.vars['id'];
	mail = db(db.mail.id==Id).select()
	if mail[0].attachment is not None:
		attachId = mail[0].attachment[0].Name
		link = mail[0].attachment[0].attachment
		return attachId+">"+link
	return ""

def deleteInbox():
	counter = request.vars['count'];
	counter = counter.split(">");
	counter.pop();
	for i in counter:
		row = db(db.mail.id==i).select()
		row[0].update_record(delt=1);
	return ""

def readInbox():
        counter = request.vars['count'];
        counter = counter.split(">");
        counter.pop();
        for i in counter:
                row = db(db.mail.id==i).select()
                row[0].update_record(red=1);
        return ""

def unreadInbox():
        counter = request.vars['count'];
        counter = counter.split(">");
        counter.pop();
        for i in counter:
                row = db(db.mail.id==i).select()
                row[0].update_record(red=0);
        return ""
def importantInbox():
        counter = request.vars['count'];
        counter = counter.split(">");
        counter.pop();
        for i in counter:
                row = db(db.mail.id==i).select()
                row[0].update_record(important=1);
        return ""

def search():

        import json
        ct = 1
        result = {}
        x = request.vars["value"];
	name = request.vars["name"]
        if x == '':
                return json.dumps("None");
	x=x.lower();
        if x == 'starred' or x == 'important':
		rows = db((db.mail.rec_email == name)&(db.mail.delt==0)).select();
		for row in rows:
			if row.important == 1 or (x.lower() in row.subject.lower() or x.lower() in row.sender_email.lower()):
                     		mail = {}
                        	mail["id"]=row.id
                        	mail["sub"] = row.subject
                       		mail["send_id"] = row.sender_email
                        	mail["sent_date"] = row.sent_date
                        	mail["tag"] = row.tag
                        	mail["red"] = row.red
                        	mail["important"] = row.important
                        	mail["msg"] = row.mail_message
                        	mail["sent_time"] = row.sent_time
                        	if row.attachment:
                               		mail["Name"] = row.attachment[0].Name
                                	mail["Link"] = row.attachment[0].attachment
                        	result[ct] = mail
                        	ct += 1
        	return json.dumps(result);
	if x == 'read':
                rows = db((db.mail.rec_email == name)&(db.mail.delt==0)).select();
                for row in rows:
                        if row.red == 1 or (x.lower() in row.subject.lower() or x.lower() in row.sender_email.lower()):
                                mail = {}
                                mail["id"]=row.id
                                mail["sub"] = row.subject
                                mail["send_id"] = row.sender_email
                                mail["sent_date"] = row.sent_date
                                mail["tag"] = row.tag
                                mail["red"] = row.red
                                mail["important"] = row.important
                                mail["msg"] = row.mail_message
                                mail["sent_time"] = row.sent_time
                                if row.attachment:
                                        mail["Name"] = row.attachment[0].Name
                                        mail["Link"] = row.attachment[0].attachment
                                result[ct] = mail
                                ct += 1
                return json.dumps(result);
	if x == 'unread':
                rows = db((db.mail.rec_email == name)&(db.mail.delt==0)).select();
                for row in rows:
                        if row.red == 0 or (x.lower() in row.subject.lower() or x.lower() in row.sender_email.lower()):
                                mail = {}
                                mail["id"]=row.id
                                mail["sub"] = row.subject
                                mail["send_id"] = row.sender_email
                                mail["sent_date"] = row.sent_date
                                mail["tag"] = row.tag
                                mail["red"] = row.red
                                mail["important"] = row.important
                                mail["msg"] = row.mail_message
                                mail["sent_time"] = row.sent_time
                                if row.attachment:
                                        mail["Name"] = row.attachment[0].Name
                                        mail["Link"] = row.attachment[0].attachment
                                result[ct] = mail
                                ct += 1
                return json.dumps(result);

	rows = db((db.mail.rec_email == name)&(db.mail.delt==0)).select();
        for row in rows:
        	if x.lower() in row.subject.lower() or x.lower() in row.sender_email.lower():
                        mail = {}
                        mail["id"]=row.id
                        mail["sub"] = row.subject
                        mail["send_id"] = row.sender_email
                        mail["sent_date"] = row.sent_date
                        mail["tag"] = row.tag
                        mail["red"] = row.red
                        mail["important"] = row.important
                        mail["msg"] = row.mail_message
                        mail["sent_time"] = row.sent_time
			if row.attachment:
				mail["Name"] = row.attachment[0].Name
				mail["Link"] = row.attachment[0].attachment
                        result[ct] = mail
                        ct += 1
        return json.dumps(result);


def showTrash():	
	import json
	ct = 1;
        mails = {};
        user = request.vars['id'];
        row = db(db.student.email_id == user).select(db.student.mails);
	if row[0]['mails'] == None:
		return str(mails);
	a = row[0]['mails']
	a.sort(reverse=True)
        for j in a:
		if j.delt == 1:
                	temp = {}
                   	temp["send_id"] = j.sender_email
                   	temp["sub"] = j.subject
                   	temp["msg"] = j.mail_message
                   	temp["sent_date"] = j.sent_date
                   	temp["sent_time"] = j.sent_time
                   	temp["tag"] = j.tag
		   	temp["id"] = j.id
			if j.attachment:
				temp["Name"] = j.attachment[0].Name
				temp["Link"] = j.attachment[0].attachment
			else:
				temp["Name"] = "None"
				temp["Link"] = "None"
                   	mails[ct] = temp;
		   	ct += 1;
        return json.dumps(mails)

def attachmentview():

	row = db(db.un).select();


        form = SQLFORM(db.attachments, formstyle="divs", submit_button="Attach", upload=URL('download'), fields=['attachment']);
        if request.vars.attachment is not None and request.vars.attachment != "":
                form.vars.uniqueId = row[0].mail_number
                form.vars.Name = request.vars.attachment.filename
        if form.accepts(request, formname=None):
                 pass
        return dict(form=form)
		
def setread():
	a = eval(request.vars["myjson"])
	b = db((db.mail.id == a["id"])&(db.mail.sent_time == a["sent_time"])&(db.mail.sent_date == a["sent_date"])&(db.mail.subject == a["sub"])&(db.mail.sender_email == a["send_id"])&(db.mail.mail_message == a["msg"])&(db.mail.tag == a["tag"])).select()
	if len(b) != 0:	
		b[0].update_record(red=1)
	return "Done!"

def setunread():
	a = eval(request.vars["myjson"])
	b = db((db.mail.id == a["id"])&(db.mail.sent_time == a["sent_time"])&(db.mail.sent_date == a["sent_date"])&(db.mail.subject == a["sub"])&(db.mail.sender_email == a["send_id"])&(db.mail.mail_message == a["msg"])&(db.mail.tag == a["tag"])).select()
	if len(b) != 0:	
		b[0].update_record(red=0)
	return "Done!"

def setimportant():
	a = eval(request.vars["myjson"])
	b = db((db.mail.id == a["id"])&(db.mail.sent_time == a["sent_time"])&(db.mail.sent_date == a["sent_date"])&(db.mail.subject == a["sub"])&(db.mail.sender_email == a["send_id"])&(db.mail.mail_message == a["msg"])&(db.mail.tag == a["tag"])).select()
	if len(b) != 0:	
		b[0].update_record(important=1)
	return "Done!"

def deleteTrash():
	mails = db(db.mail).select();
	for mail in mails:
		if mail.delt == 1:
			db(db.mail.id == mail.id).delete();
	return "Deleted"
